namespace midspace.adminscripts
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Text.RegularExpressions;

    using Sandbox.Definitions;
    using Sandbox.ModAPI;
    using VRage.ModAPI;
    using VRageMath;

    /// <summary>
    /// Multi purpose Teleport command.
    /// </summary>
    public class CommandTeleport : ChatCommand
    {
        private static readonly string teleportPattern = @"/tp\s+(?:(?<Ship1>S\d+)|(?<Player1>P\d+)|(?:GPS:([^:]{0,32}):(?<GX1>[\d\.-]*):(?<GY1>[\d\.-]*):(?<GZ1>[\d\.-]*):)|(?:""(?<Quote1>[^""]|.*?)"")|(?<Word1>[^\s]*)|(?:(?<X1>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Y1>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Z1>[+-]?((\d+(\.\d*)?)|(\.\d+)))))(\s+(?:(?<Ship2>S\d+)|(?<Player2>P\d+)|(?:GPS:([^:]{0,32}):(?<GX2>[\d\.-]*):(?<GY2>[\d\.-]*):(?<GZ2>[\d\.-]*):)|(?:""(?<Quote2>[^""]|.*?)"")|(?<Word2>[^\s]*)|(?:(?<X2>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Y2>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Z2>[+-]?((\d+(\.\d*)?)|(\.\d+)))))|)\s*$";
        public CommandTeleport()
            : base(ChatCommandSecurity.Admin, "tp", new[] { "/tp" })
        {
        }

        public override void Help(bool brief)
        {
            MyAPIGateway.Utilities.ShowMessage("/tp <X> <Y> <Z>", "Teleport player or piloted ship to the specified location <X Y Z>. Includes rotors and pistons!");
            return;

            // Only partially implmented, this is why the help isn't been used currently.

            if (brief)
                MyAPIGateway.Utilities.ShowMessage("/tp <X> <Y> <Z>", "Teleport an specified <player> or <ship> to another <player>, <ship> or location <X Y Z>.");
            else
            {
                var description = string.Format(
@"This command is used teleport ships and players to any location.
Ships that teleport, will include all Rotor and Piston attached part, but no anything via a Connector.
Players can be specified either by the player hotlist generated by /status, or by a full name.
Ships can be specified either by the ship hotlist generated by /listships, or by full name.

P123 - player hotlist number.
""player name"" - complete player name with spaces surrounded by quotes.
playername - complete player name without spaces.

S123 - ship hotlist number.
""ship name"" - complete ship name with spaces surrounded by quotes.
shipname - complete ship name without spaces.

/tp <player>
Function: Teleport you or the ship you are piloting to the specified player.

/tp <ship>
Function: Teleport you or the ship you are piloting to the specified ship.

/tp <X> <Y> <Z>
Function: Teleport you or the ship you are piloting to the location.

/tp <player> <player>
Function: Teleport the specified player to another player.

/tp <player> <ship>
Function: Teleport the specified player to the ship.

/tp <player> <X> <Y> <Z>
Function: Teleport the specified player to the location.

/tp <ship> <ship>
Function: Teleport the specified ship to another ship.

/tp <ship> <player>
Function: Teleport the specified ship to the player.

/tp <ship> <X> <Y> <Z>
Function: Teleport the specified ship to the location.
"); // add empty line at the end -> looks better.
                MyAPIGateway.Utilities.ShowMissionScreen("Help", null, Name, description.ToString(), null, null);
            }
        }

        public override bool Invoke(string messageText)
        {
            var match = Regex.Match(messageText, teleportPattern, RegexOptions.IgnoreCase);

            if (match.Success)
            {
                var ship1 = !string.IsNullOrEmpty(match.Groups["Ship1"].Value);
                var ship2 = !string.IsNullOrEmpty(match.Groups["Ship2"].Value);
                var player1 = !string.IsNullOrEmpty(match.Groups["Player1"].Value);
                var player2 = !string.IsNullOrEmpty(match.Groups["Player2"].Value);
                var pos1 = !string.IsNullOrEmpty(match.Groups["X1"].Value);
                var pos2 = !string.IsNullOrEmpty(match.Groups["X2"].Value);
                var word1 = !string.IsNullOrEmpty(match.Groups["Quote1"].Value) || !string.IsNullOrEmpty(match.Groups["Word1"].Value);
                var word2 = !string.IsNullOrEmpty(match.Groups["Quote2"].Value) || !string.IsNullOrEmpty(match.Groups["Word2"].Value);
                var gps1 = !string.IsNullOrEmpty(match.Groups["GX1"].Value);
                var gps2 = !string.IsNullOrEmpty(match.Groups["GX2"].Value);
                var currentPosition = MyAPIGateway.Session.Player.Controller.ControlledEntity.Entity.GetPosition();

                if (!ship2 && !player2 && !pos2 && !word2)
                {
                    // move this player or the ship this player is in.
                    var player = MyAPIGateway.Session.Player;

                    if (pos1)
                    {
                        var position = new Vector3D(
                            double.Parse(match.Groups["X1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["Y1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["Z1"].Value, CultureInfo.InvariantCulture));

                        MovePlayerPilotToPosition(player, position);
                        CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                        return true;
                    }
                    if (gps1)
                    {
                        var position = new Vector3D(
                            double.Parse(match.Groups["GX1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["GY1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["GZ1"].Value, CultureInfo.InvariantCulture));

                        MovePlayerPilotToPosition(player, position);
                        CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                        return true;
                    }
                    if (player1)
                    {
                        int index;
                        if (Int32.TryParse(match.Groups["Player1"].Value.Substring(1), out index) && index > 0 && index <= CommandPlayerStatus.IdentityCache.Count)
                        {
                            IMyIdentity selectedPlayer = CommandPlayerStatus.IdentityCache[index - 1];
                            MovePlayerPilotToPlayer(player, selectedPlayer, true);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }
                    }
                    if (ship1)
                    {
                        int index;
                        if (Int32.TryParse(match.Groups["Ship1"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                        {
                            var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                            var ship = currentShipList.FirstElement();
                            MovePlayerPilotToShip(player, ship);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }
                    }
                    if (word1)
                    {
                        var entityName = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;

                        var players = new List<IMyPlayer>();
                        MyAPIGateway.Players.GetPlayers(players, p => p.DisplayName.Equals(entityName, StringComparison.InvariantCultureIgnoreCase));
                        var currentShipList = Support.FindShipsByName(entityName);

                        // identify a unique ship or player by the name.
                        if (players.Count == 0 && currentShipList.Count == 0)
                        {
                            MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Cannot find the player or ship of name '{0}'", entityName);
                            return true;
                        }

                        if (players.Count == 0 && currentShipList.Count == 1)
                        {
                            MovePlayerPilotToShip(player, currentShipList.FirstElement());
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        if (players.Count == 1 && currentShipList.Count == 0)
                        {
                            MovePlayerPilotToPlayer(player, players[0], true);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        // TODO: too many entities. hotlist or sublist?

                        MyAPIGateway.Utilities.ShowMessage("Players", "{0}", players.Count);
                        MyAPIGateway.Utilities.ShowMessage("Ships", "{0}", currentShipList.Count);
                        //var findPlayer = players.FirstOrDefault();

                        return true;
                    }
                }


                var entityName1 = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;
                var entityName2 = string.IsNullOrEmpty(match.Groups["Quote2"].Value) ? match.Groups["Word2"].Value : match.Groups["Quote2"].Value;

                var position2 = new Vector3D(
                    double.Parse(match.Groups["X2"].Value, CultureInfo.InvariantCulture),
                    double.Parse(match.Groups["Y2"].Value, CultureInfo.InvariantCulture),
                    double.Parse(match.Groups["Z2"].Value, CultureInfo.InvariantCulture));

                // TODO: generic the methods. :(

                if (pos2)
                {
                    if (player1)
                    {
                    }
                    if (ship1)
                    {
                    }
                    if (word1)
                    {
                    }
                }

                if (ship2)
                {
                    if (player1)
                    {
                    }
                    if (ship1)
                    {
                    }
                    if (word1)
                    {
                    }
                }

                if (player2)
                {
                    if (player1)
                    {
                    }
                    if (ship1)
                    {
                    }
                    if (word1)
                    {
                    }
                }

                if (word2)
                {
                    if (player1)
                    {
                    }
                    if (ship1)
                    {
                    }
                    if (word1)
                    {
                    }
                }


                // ... move logic.
                return true;
            }

            return false;
        }

        private void FindEntitiesNamed(string entityName)
        {
            var players = new List<IMyPlayer>();
            MyAPIGateway.Players.GetPlayers(players, p => p.DisplayName.Equals(entityName, StringComparison.InvariantCultureIgnoreCase));
            var currentShipList = Support.FindShipsByName(entityName);

            var list = new List<IMyEntity>();

            list.AddRange(currentShipList);
            //list.AddRange(players);

            //// identify a unique ship or player by the name.
            //if (players.Count == 0 && currentShipList.Count == 0)
            //{
            //    MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Cannot find the player or ship of name '{0}'", entityName);
            //    return true;
            //}

            //if (players.Count == 0 && currentShipList.Count == 1)
            //{
            //    MovePlayerPilotToShip(player, currentShipList.FirstElement());
            //    return true;
            //}

            //if (players.Count == 1 && currentShipList.Count == 0)
            //{
            //    MovePlayerPilotToPlayer(player, players[0], true);
            //    return true;
            //}

            //// TODO: too many entities. hostlist or sublist?

            //MyAPIGateway.Utilities.ShowMessage("Players", "{0}", players.Count);
            //MyAPIGateway.Utilities.ShowMessage("Ships", "{0}", currentShipList.Count);
            ////var findPlayer = players.FirstOrDefault();

            //return true;
        }

        private void Move(IMyEntity source, IMyEntity target)
        {

        }

        private void MovePlayerPilotToPosition(IMyPlayer sourcePlayer, Vector3D targetPosition)
        {
            if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
            {
                // Move the ship the player is piloting.
                var cubeGrid = sourcePlayer.Controller.ControlledEntity.Entity.GetTopMostParent();
                var grids = cubeGrid.GetAttachedGrids();
                var worldOffset = targetPosition - sourcePlayer.Controller.ControlledEntity.Entity.GetPosition();

                foreach (var grid in grids)
                {
                    grid.SetPosition(grid.GetPosition() + worldOffset);
                }
            }
            else
            {
                // Move the player only.
                sourcePlayer.Controller.ControlledEntity.Entity.SetPosition(targetPosition);
            }
        }

        private void MovePlayerPilotToPlayer(IMyPlayer sourcePlayer, IMyIdentity targetedPlayerIdentity, bool agressivePosition)
        {
            var listplayers = new List<IMyPlayer>();
            MyAPIGateway.Players.GetPlayers(listplayers, p => p.PlayerID == targetedPlayerIdentity.PlayerId);
            MovePlayerPilotToPlayer(sourcePlayer, listplayers.FirstOrDefault(), agressivePosition);
        }

        private void MovePlayerPilotToPlayer(IMyPlayer sourcePlayer, IMyPlayer targetedPlayer, bool agressivePosition)
        {
            if (sourcePlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Source Player no longer exists.");
                return;
            }

            if (targetedPlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Target Player no longer exists.");
                return;
            }

            if (sourcePlayer.PlayerID == targetedPlayer.PlayerID)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Cannot teleport player to themself.");
                return;
            }

            bool success = false;

            if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
            {
                MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function not complete. Cannot transport piloted Ship to another player.");
                return;
            }
            else
            {
                if (targetedPlayer.Controller.ControlledEntity is IMyCubeBlock)
                {
                    var cockpit = (IMyCubeBlock)targetedPlayer.Controller.ControlledEntity;

                    var definition = MyDefinitionManager.Static.GetCubeBlockDefinition(cockpit.BlockDefinition);
                    var cockpitDefintion = definition as MyCockpitDefinition;
                    var remoteDefintion = definition as MyRemoteControlDefinition;

                    // target is a pilot in cockpit.
                    if (cockpitDefintion != null)
                    {
                        if (cockpit.CubeGrid.GridSizeEnum != Sandbox.Common.ObjectBuilders.MyCubeSize.Small)
                        {
                            success = Support.MovePlayerToCockpit(sourcePlayer, targetedPlayer.Controller.ControlledEntity.Entity);
                        }
                        else
                        {
                            success = Support.MovePlayerToShipGrid(sourcePlayer, cockpit.CubeGrid);
                        }
                    }
                    else if (remoteDefintion != null)
                    {
                        MyAPIGateway.Utilities.ShowMessage("Failed", string.Format("Cannot determine player location. Is Remote controlling '{0}'", cockpit.CubeGrid.DisplayName));

                        // where is the player? in a cockpit/chair or freefloating?

                        // player.GetPosition() is actually the remote ship location.

                        //var freePos = MyAPIGateway.Entities.FindFreePlace(player.GetPosition(), (float)player.Controller.ControlledEntity.Entity.WorldVolume.Radius, 500, 20, 1f);
                        //if (!freePos.HasValue)
                        //{
                        //    MyAPIGateway.Utilities.ShowMessage("Failed", "Could not find safe location to transport to.");
                        //    return true;
                        //}

                        //sourcePlayer.Controller.ControlledEntity.Entity.SetPosition(freePos.Value);
                        success = true;
                    }
                }
                else
                {
                    // target is a player only.
                    success = Support.MovePlayerToPlayer(sourcePlayer, targetedPlayer, true, agressivePosition);
                }
            }

            if (!success)
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Could not find a safe location to teleport to.");
        }

        private void MovePlayerPilotToShip(IMyPlayer sourcePlayer, IMyEntity targetedShip)
        {
            if (sourcePlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Source Player no longer exists.");
                return;
            }

            if (targetedShip == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Targeted Ship not found.");
                return;
            }

            if (targetedShip.Closed)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Targeted Ship no longer exists.");
                return;
            }

            bool success;

            if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
            {
                // TODO: complete code.
                success = Support.MoveShipToShip(sourcePlayer.Controller.ControlledEntity.Entity.GetTopMostParent(), targetedShip);
            }
            else
            {
                // Move the player only.
                var cockpits = targetedShip.FindWorkingCockpits();
                if (cockpits.Length > 0 && ((IMyCubeGrid)targetedShip).GridSizeEnum != Sandbox.Common.ObjectBuilders.MyCubeSize.Small)
                {
                    success = Support.MovePlayerToCockpit(sourcePlayer, (IMyEntity)cockpits[0]);
                }
                else
                {
                    success = Support.MovePlayerToShipGrid(sourcePlayer, targetedShip);
                }
            }

            if (!success)
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Could not find a safe location to teleport to.");
        }
    }
}
