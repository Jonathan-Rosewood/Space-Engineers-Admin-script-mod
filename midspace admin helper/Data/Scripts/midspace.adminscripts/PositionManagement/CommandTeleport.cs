namespace midspace.adminscripts
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Text.RegularExpressions;

    using Sandbox.Definitions;
    using Sandbox.ModAPI;
    using VRage.ModAPI;
    using VRageMath;

    /// <summary>
    /// Multi purpose Teleport command.
    /// </summary>
    public class CommandTeleport : ChatCommand
    {
        private static readonly string teleportPattern = @"(?<command>(/tp)|(/tpx))\s+(?:(?<ID1>ID)|(?<Ship1>S\d+)|(?<Character1>C\d+)|(?<Asteroid1>A\d+)|(?<Planet1>P\d+)|(?:GPS:([^:]{0,32}):(?<GX1>[\d\.-]*):(?<GY1>[\d\.-]*):(?<GZ1>[\d\.-]*):)|(?:""(?<Quote1>[^""]|.*?)"")|(?<Word1>[^\s]*)|(?:(?<X1>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Y1>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Z1>[+-]?((\d+(\.\d*)?)|(\.\d+)))))(\s+(?:(?<ID2>ID)|(?<Ship2>S\d+)|(?<Character2>C\d+)|(?<Asteroid2>A\d+)|(?<Planet2>P\d+)|(?:GPS:([^:]{0,32}):(?<GX2>[\d\.-]*):(?<GY2>[\d\.-]*):(?<GZ2>[\d\.-]*):)|(?:""(?<Quote2>[^""]|.*?)"")|(?<Word2>[^\s]*)|(?:(?<X2>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Y2>[+-]?((\d+(\.\d*)?)|(\.\d+)))\s+(?<Z2>[+-]?((\d+(\.\d*)?)|(\.\d+)))))|)\s*$";
        public CommandTeleport()
            : base(ChatCommandSecurity.Admin, "tp", new[] { "/tp", "/tpx" })
        {
        }

        public override void Help(bool brief)
        {
            if (brief)
                MyAPIGateway.Utilities.ShowMessage("/tp <location>", "Teleport an specified <player character> or <ship> to another <player character>, <ship>, <asteroid>, <planet>, <id> or location <GPS> or <X Y Z>.");
            else
            {
                var description = string.Format(
@"This command is used teleport ships and players to any location.
Ships that teleport, will include all subgrid parts.
Players can be specified either by the player hotlist generated by /status, or by a full name.
Ships can be specified either by the ship hotlist generated by /listships, or by full name.

/tp <Character player>
Function: Teleport you or the ship you are piloting to the specified Character player.

/tp <ship>
Function: Teleport you or the ship you are piloting to the specified ship.

/tp <X> <Y> <Z>
Function: Teleport you or the ship you are piloting to the location.

/tp GPS:Homebase:189821.09:142524.88:123142.12:
Function: Teleport you or the ship you are piloting to the GPS location copied from GPS panel.

/tp ID
Function: Teleport you or the ship you are piloting to the last entity tagged with the /id command.


/tp <Character player> <Character player>
Function: Teleport the specified Character player to another Character player.

/tp <Character player> <ship>
Function: Teleport the specified Character player to the ship.

/tp <Character player> <X> <Y> <Z>
Function: Teleport the specified Character player to the location.

/tp <Character player> GPS:Homebase:189821.09:142524.88:123142.12:
Function: Teleport the specified Character player to the GPS location.


/tp <ship> <ship>
Function: Teleport the specified ship to another ship.

/tp <ship> <Character player>
Function: Teleport the specified ship to the Character player.

/tp <ship> <X> <Y> <Z>
Function: Teleport the specified ship to the location.

/tp <ship> GPS:Homebase:189821.09:142524.88:123142.12:
Function: Teleport the specified ship to the GPS location.


C123 - Character player hotlist number.
""Character player name"" - complete player name with spaces surrounded by quotes.
playername - complete player name without spaces.

S123 - ship hotlist number.
""ship name"" - complete ship name with spaces surrounded by quotes.
shipname - complete ship name without spaces.

P123 - planet hotlist number.
""planet name"" - complete planet name with spaces surrounded by quotes.
planetname - complete planet name without spaces.

A123 - asteroid hotlist number.
""asteroid name"" - complete asteroid name with spaces surrounded by quotes.
asteroidname - complete asteroid name without spaces.

"); // add empty line at the end -> looks better.
                MyAPIGateway.Utilities.ShowMissionScreen("Help", null, Name, description.ToString(), null, null);
            }
        }

        Action emptySourceMsg = delegate ()
        {
            MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Source entity no longer exists.");
        };

        Action emptyTargetMsg = delegate ()
        {
            MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Target entity no longer exists.");
        };

        Action noSafeLocationMsg = delegate ()
        {
            MyAPIGateway.Utilities.ShowMessage("Failed", "Could not find safe location to transport to.");
        };

        public override bool Invoke(string messageText)
        {
            var match = Regex.Match(messageText, teleportPattern, RegexOptions.IgnoreCase);

            if (match.Success)
            {
                var safely = match.Groups["command"].Value.Equals("/tp", StringComparison.InvariantCultureIgnoreCase);
                var ident1 = !string.IsNullOrEmpty(match.Groups["ID1"].Value);
                var ident2 = !string.IsNullOrEmpty(match.Groups["ID2"].Value);
                var ship1 = !string.IsNullOrEmpty(match.Groups["Ship1"].Value);
                var ship2 = !string.IsNullOrEmpty(match.Groups["Ship2"].Value);
                var character1 = !string.IsNullOrEmpty(match.Groups["Character1"].Value);
                var character2 = !string.IsNullOrEmpty(match.Groups["Character2"].Value);
                var asteroid1 = !string.IsNullOrEmpty(match.Groups["Asteroid1"].Value);
                var asteroid2 = !string.IsNullOrEmpty(match.Groups["Asteroid2"].Value);
                var planet1 = !string.IsNullOrEmpty(match.Groups["Planet1"].Value);
                var planet2 = !string.IsNullOrEmpty(match.Groups["Planet2"].Value);
                var pos1 = !string.IsNullOrEmpty(match.Groups["X1"].Value);
                var pos2 = !string.IsNullOrEmpty(match.Groups["X2"].Value);
                var word1 = !string.IsNullOrEmpty(match.Groups["Quote1"].Value) || !string.IsNullOrEmpty(match.Groups["Word1"].Value);
                var word2 = !string.IsNullOrEmpty(match.Groups["Quote2"].Value) || !string.IsNullOrEmpty(match.Groups["Word2"].Value);
                var gps1 = !string.IsNullOrEmpty(match.Groups["GX1"].Value);
                var gps2 = !string.IsNullOrEmpty(match.Groups["GX2"].Value);
                var currentPosition = MyAPIGateway.Session.Player.Controller.ControlledEntity.Entity.GetPosition();
                int index;

                if (!ident2 && !ship2 && !character2 && !asteroid2 && !planet2 && !word2 && !pos2 && !gps2)
                {
                    // move this player or the ship this player is in.
                    var player = MyAPIGateway.Session.Player;

                    if (ident1)
                    {
                        if (CommandIdentify.IdentifyCache == null)
                        {
                            MyAPIGateway.Utilities.ShowMessage("Teleport failed", "No item identified yet.");
                            return true;
                        }

                        if (CommandIdentify.IdentifyCache is IMyIdentity)
                        {
                            MovePlayerPilotToPlayer(player, ((IMyIdentity)CommandIdentify.IdentifyCache).Player(), safely, true);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        if (CommandIdentify.IdentifyCache is IMyCubeGrid)
                        {
                            MovePlayerPilotToShip(player, CommandIdentify.IdentifyCache, safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        if (CommandIdentify.IdentifyCache is IMyCubeBlock)
                        {
                            MovePlayerPilotToShip(player, CommandIdentify.IdentifyCache.GetTopMostParent(), safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        if (CommandIdentify.IdentifyCache is IMyVoxelBase)
                        {
                            MovePlayerPilotToVoxel(player, (IMyVoxelBase)CommandIdentify.IdentifyCache, safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Item not teleportable to currently.");
                        return true;
                    }
                    if (pos1)
                    {
                        var position = new Vector3D(
                            double.Parse(match.Groups["X1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["Y1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["Z1"].Value, CultureInfo.InvariantCulture));

                        Support.MoveTo(player, position, safely, noSafeLocationMsg);
                        CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                        return true;
                    }
                    if (gps1)
                    {
                        var position = new Vector3D(
                            double.Parse(match.Groups["GX1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["GY1"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["GZ1"].Value, CultureInfo.InvariantCulture));

                        Support.MoveTo(player, position, safely, noSafeLocationMsg);
                        CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                        return true;
                    }
                    if (character1)
                    {
                        if (Int32.TryParse(match.Groups["Character1"].Value.Substring(1), out index) && index > 0 && index <= CommandPlayerStatus.IdentityCache.Count)
                        {
                            IMyIdentity selectedPlayer = CommandPlayerStatus.IdentityCache[index - 1];
                            MovePlayerPilotToPlayer(player, selectedPlayer.Player(), safely, true);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }
                    }
                    if (ship1)
                    {
                        if (Int32.TryParse(match.Groups["Ship1"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                        {
                            var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                            var ship = currentShipList.FirstElement();
                            MovePlayerPilotToShip(player, ship, safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }
                    }
                    if (asteroid1)
                    {
                        if (Int32.TryParse(match.Groups["Asteroid1"].Value.Substring(1), out index) && index > 0 && index <= CommandAsteroidsList.AsteroidCache.Count)
                        {
                            var currentAsteroidList = new HashSet<IMyEntity> { CommandAsteroidsList.AsteroidCache[index - 1] };
                            var asteroid = (IMyVoxelBase)currentAsteroidList.FirstElement();
                            MovePlayerPilotToVoxel(player, asteroid, safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }
                    }
                    if (planet1)
                    {
                        if (Int32.TryParse(match.Groups["Planet1"].Value.Substring(1), out index) && index > 0 && index <= CommandPlanetsList.PlanetCache.Count)
                        {
                            var currentPlanetList = new HashSet<IMyEntity> { CommandPlanetsList.PlanetCache[index - 1] };
                            var planet = (IMyVoxelBase)currentPlanetList.FirstElement();
                            MovePlayerPilotToVoxel(player, planet, safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }
                    }
                    if (word1)
                    {
                        var entityName = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;

                        var players = new List<IMyPlayer>();
                        MyAPIGateway.Players.GetPlayers(players, p => p.DisplayName.Equals(entityName, StringComparison.InvariantCultureIgnoreCase));
                        var currentShipList = Support.FindShipsByName(entityName);

                        // identify a unique ship or player by the name.
                        if (players.Count == 0 && currentShipList.Count == 0)
                        {
                            MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Cannot find the player or ship of name '{0}'", entityName);
                            return true;
                        }

                        if (players.Count == 0 && currentShipList.Count == 1)
                        {
                            MovePlayerPilotToShip(player, currentShipList.FirstElement(), safely);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        if (players.Count == 1 && currentShipList.Count == 0)
                        {
                            MovePlayerPilotToPlayer(player, players[0], safely, true);
                            CommandTeleportBack.SaveTeleportInHistory(currentPosition);
                            return true;
                        }

                        // TODO: too many entities. hotlist or sublist?

                        MyAPIGateway.Utilities.ShowMessage("Players", "{0}", players.Count);
                        MyAPIGateway.Utilities.ShowMessage("Ships", "{0}", currentShipList.Count);
                        //var findPlayer = players.FirstOrDefault();

                        return true;
                    }

                    MyAPIGateway.Utilities.ShowMessage("Error", "Could not find requested object");
                    return true;
                }

                // TODO: generic the methods. :(

                if (pos2)
                {
                    var position2 = new Vector3D(
                        double.Parse(match.Groups["X2"].Value, CultureInfo.InvariantCulture),
                        double.Parse(match.Groups["Y2"].Value, CultureInfo.InvariantCulture),
                        double.Parse(match.Groups["Z2"].Value, CultureInfo.InvariantCulture));

                    if (character1)
                    {
                        if (Int32.TryParse(match.Groups["Character1"].Value.Substring(1), out index) && index > 0 && index <= CommandPlayerStatus.IdentityCache.Count)
                        {
                            IMyIdentity selectedPlayer = CommandPlayerStatus.IdentityCache[index - 1];
                            Support.MoveTo(selectedPlayer.Player(), position2, safely, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (ship1)
                    {
                        if (Int32.TryParse(match.Groups["Ship1"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                        {
                            var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                            var ship = currentShipList.FirstElement();
                            Support.MoveTo(ship, position2, safely, emptySourceMsg, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (word1)
                    {
                        var entityName1 = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;

                        MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function of teleport is not complete.");
                    }
                }

                if (gps2)
                {
                    var position2 = new Vector3D(
                            double.Parse(match.Groups["GX2"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["GY2"].Value, CultureInfo.InvariantCulture),
                            double.Parse(match.Groups["GZ2"].Value, CultureInfo.InvariantCulture));

                    if (character1)
                    {
                        if (Int32.TryParse(match.Groups["Character1"].Value.Substring(1), out index) && index > 0 && index <= CommandPlayerStatus.IdentityCache.Count)
                        {
                            IMyIdentity selectedPlayer = CommandPlayerStatus.IdentityCache[index - 1];
                            Support.MoveTo(selectedPlayer.Player(), position2, safely, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (ship1)
                    {
                        if (Int32.TryParse(match.Groups["Ship1"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                        {
                            var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                            var ship = currentShipList.FirstElement();
                            Support.MoveTo(ship, position2, safely, emptySourceMsg, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (word1)
                    {
                        var entityName1 = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;

                        MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function of teleport is not complete.");
                    }
                }

                if (ship2)
                {
                    IMyEntity targetShip = null;
                    if (Int32.TryParse(match.Groups["Ship2"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                    {
                        var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                        targetShip = currentShipList.FirstElement();
                    }

                    if (character1)
                    {
                    }
                    if (ship1 && targetShip != null)
                    {
                        if (Int32.TryParse(match.Groups["Ship1"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                        {
                            var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                            var ship = currentShipList.FirstElement();

                            Support.MoveTo(ship, targetShip.WorldMatrix.Translation, safely, emptySourceMsg, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (word1)
                    {
                        var entityName1 = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;
                    }

                    MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function of teleport is not complete.");
                }

                if (character2)
                {
                    IMyIdentity targetPlayer = null;
                    if (Int32.TryParse(match.Groups["Character2"].Value.Substring(1), out index) && index > 0 && index <= CommandPlayerStatus.IdentityCache.Count)
                    {
                        targetPlayer = CommandPlayerStatus.IdentityCache[index - 1];
                    }

                    if (character1 && targetPlayer != null)
                    {
                        if (Int32.TryParse(match.Groups["Character1"].Value.Substring(1), out index) && index > 0 && index <= CommandPlayerStatus.IdentityCache.Count)
                        {
                            IMyIdentity selectedPlayer = CommandPlayerStatus.IdentityCache[index - 1];
                            Support.MoveTo(selectedPlayer.Player(), targetPlayer.Player().GetPosition(), safely, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (ship1 && targetPlayer != null)
                    {
                        if (Int32.TryParse(match.Groups["Ship1"].Value.Substring(1), out index) && index > 0 && index <= CommandListShips.ShipCache.Count)
                        {
                            var currentShipList = new HashSet<IMyEntity> { CommandListShips.ShipCache[index - 1] };
                            var ship = currentShipList.FirstElement();
                            Support.MoveTo(ship, targetPlayer.Player().GetPosition(), safely, emptySourceMsg, noSafeLocationMsg);
                            return true;
                        }
                    }
                    if (word1)
                    {
                        var entityName1 = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;
                        var entityName2 = string.IsNullOrEmpty(match.Groups["Quote2"].Value) ? match.Groups["Word2"].Value : match.Groups["Quote2"].Value;

                        MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function of teleport is not complete.");
                    }
                }

                if (word2)
                {
                    var entityName1 = string.IsNullOrEmpty(match.Groups["Quote1"].Value) ? match.Groups["Word1"].Value : match.Groups["Quote1"].Value;
                    var entityName2 = string.IsNullOrEmpty(match.Groups["Quote2"].Value) ? match.Groups["Word2"].Value : match.Groups["Quote2"].Value;

                    if (character1)
                    {
                    }
                    if (ship1)
                    {
                    }
                    if (word1)
                    {
                    }

                    MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function of teleport is not complete.");
                }


                // ... move logic.
                return true;
            }

            return false;
        }

        private void FindEntitiesNamed(string entityName)
        {
            var players = new List<IMyPlayer>();
            MyAPIGateway.Players.GetPlayers(players, p => p.DisplayName.Equals(entityName, StringComparison.InvariantCultureIgnoreCase));
            var currentShipList = Support.FindShipsByName(entityName);

            var list = new List<IMyEntity>();

            list.AddRange(currentShipList);
            //list.AddRange(players);

            //// identify a unique ship or player by the name.
            //if (players.Count == 0 && currentShipList.Count == 0)
            //{
            //    MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Cannot find the player or ship of name '{0}'", entityName);
            //    return true;
            //}

            //if (players.Count == 0 && currentShipList.Count == 1)
            //{
            //    MovePlayerPilotToShip(player, currentShipList.FirstElement());
            //    return true;
            //}

            //if (players.Count == 1 && currentShipList.Count == 0)
            //{
            //    MovePlayerPilotToPlayer(player, players[0], true);
            //    return true;
            //}

            //// TODO: too many entities. hostlist or sublist?

            //MyAPIGateway.Utilities.ShowMessage("Players", "{0}", players.Count);
            //MyAPIGateway.Utilities.ShowMessage("Ships", "{0}", currentShipList.Count);
            ////var findPlayer = players.FirstOrDefault();

            //return true;
        }

     

        //private bool MovePlayerPilotToPosition(IMyPlayer sourcePlayer, Vector3D targetPosition, bool safely)
        //{
        //    if (sourcePlayer == null)
        //        return false;
        //    if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
        //    {
        //        // Move the ship the player is piloting.
        //        var cubeGrid = sourcePlayer.Controller.ControlledEntity.Entity.GetTopMostParent();
        //        //var grids = cubeGrid.GetAttachedGrids();
        //        var worldOffset = targetPosition - sourcePlayer.Controller.ControlledEntity.Entity.GetPosition();

        //        //foreach (var grid in grids)
        //        //{
        //        //    grid.SetPosition(grid.GetPosition() + worldOffset);
        //        //}

        //        Support.MoveShipByOffset(cubeGrid, worldOffset, safely);

        //        return true;
        //    }

        //    // Move the player only.
        //    sourcePlayer.Controller.ControlledEntity.Entity.SetPosition(targetPosition);
        //    return true;
        //}

        //private void MoveGridToPosition(IMyEntity cubeGrid, Vector3D targetPosition, bool safely)
        //{
        //    var worldOffset = targetPosition - cubeGrid.GetPosition();
        //    Support.MoveShipByOffset(cubeGrid, worldOffset, safely);
        //}

        private void MovePlayerPilotToPlayer(IMyPlayer sourcePlayer, IMyPlayer targetedPlayer, bool safely, bool agressivePosition)
        {
            if (sourcePlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Source Player no longer exists.");
                return;
            }

            if (targetedPlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Target Player no longer exists.");
                return;
            }

            if (sourcePlayer.PlayerID == targetedPlayer.PlayerID)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Cannot teleport player to themself.");
                return;
            }

            bool success = false;

            if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
            {
                MyAPIGateway.Utilities.ShowMessage("Incomplete", "This function not complete. Cannot transport piloted Ship to another player.");
                return;
            }
            else
            {
                if (targetedPlayer.Controller.ControlledEntity is IMyCubeBlock)
                {
                    var cockpit = (IMyCubeBlock)targetedPlayer.Controller.ControlledEntity;

                    var definition = MyDefinitionManager.Static.GetCubeBlockDefinition(cockpit.BlockDefinition);
                    var cockpitDefintion = definition as MyCockpitDefinition;
                    var remoteDefintion = definition as MyRemoteControlDefinition;

                    // target is a pilot in cockpit.
                    if (cockpitDefintion != null)
                    {
                        if (cockpit.CubeGrid.GridSizeEnum != Sandbox.Common.ObjectBuilders.MyCubeSize.Small)
                            success = Support.MovePlayerToCube(sourcePlayer, targetedPlayer.Controller.ControlledEntity.Entity, safely);
                        else
                            success = Support.MovePlayerToShipGrid(sourcePlayer, cockpit.CubeGrid, safely);
                    }
                    else if (remoteDefintion != null)
                    {
                        MyAPIGateway.Utilities.ShowMessage("Failed", string.Format("Cannot determine player location. Is Remote controlling '{0}'", cockpit.CubeGrid.DisplayName));

                        // where is the player? in a cockpit/chair or freefloating?

                        // player.GetPosition() is actually the remote ship location.

                        //var freePos = MyAPIGateway.Entities.FindFreePlace(player.GetPosition(), (float)player.Controller.ControlledEntity.Entity.WorldVolume.Radius, 500, 20, 1f);
                        //if (!freePos.HasValue)
                        //{
                        //    MyAPIGateway.Utilities.ShowMessage("Failed", "Could not find safe location to transport to.");
                        //    return true;
                        //}

                        //sourcePlayer.Controller.ControlledEntity.Entity.SetPosition(freePos.Value);
                        success = true;
                    }
                }
                else
                {
                    // target is a player only.
                    success = Support.MovePlayerToPlayer(sourcePlayer, targetedPlayer, safely, agressivePosition);
                }
            }

            if (!success)
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Could not find a safe location to teleport to.");
        }

        private void MovePlayerPilotToShip(IMyPlayer sourcePlayer, IMyEntity targetedShip, bool safely)
        {
            if (sourcePlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Source Player no longer exists.");
                return;
            }

            if (targetedShip == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Targeted Ship not found.");
                return;
            }

            if (targetedShip.Closed)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Targeted Ship no longer exists.");
                return;
            }

            bool success;

            if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
            {
                success = Support.MoveTo(sourcePlayer.Controller.ControlledEntity.Entity.GetTopMostParent(), targetedShip, safely, emptySourceMsg, emptyTargetMsg, noSafeLocationMsg);
            }
            else
            {
                // Move the player only.
                var cockpits = targetedShip.FindWorkingCockpits();
                if (cockpits.Length > 0 && ((IMyCubeGrid)targetedShip).GridSizeEnum != Sandbox.Common.ObjectBuilders.MyCubeSize.Small)
                {
                    success = Support.MovePlayerToCube(sourcePlayer, (IMyEntity)cockpits[0], safely);
                }
                else
                {
                    success = Support.MovePlayerToShipGrid(sourcePlayer, targetedShip, safely);
                }
            }

            if (!success)
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Could not find a safe location to teleport to.");
        }

        private void MovePlayerPilotToVoxel(IMyPlayer sourcePlayer, IMyVoxelBase targetedVoxel, bool safely)
        {
            if (sourcePlayer == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Source Player no longer exists.");
                return;
            }

            if (targetedVoxel == null)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Targeted Voxel not found.");
                return;
            }

            if (targetedVoxel.Closed)
            {
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Targeted Voxel no longer exists.");
                return;
            }

            bool success;

            if (sourcePlayer.Controller.ControlledEntity is IMyCubeBlock)
                success = Support.MoveShipToVoxel(sourcePlayer.Controller.ControlledEntity.Entity.GetTopMostParent(), targetedVoxel);
            else
                // Move the player only.
                success = Support.MovePlayerToVoxel(sourcePlayer, targetedVoxel, safely);

            if (!success)
                MyAPIGateway.Utilities.ShowMessage("Teleport failed", "Could not find a safe location to teleport to.");
        }

    }
}
